import numpy as np
import pandas as pd
import rrcf
import matplotlib.pyplot as plt

# Specify sample parameters
n = 106
d = 4

data_line = open('result_avg_vectors.csv','r').read().split('\n')
X = np.array([])
for data in data_line:
    if len(data) < 2:
        continue
    part = data.split(',')
    X = np.append(X,[float(part[1][1:]),float(part[2]),float(part[3]),float(part[4][:-1])])

def change_format(a,b,c,d):
    return list([float(a),float(b),float(c),float(d)])


X = np.array([['192.168.2.187',change_format(11.064566929133857, 16.099212598425208, 2.871072800456212, 175.62642584487529)],
['192.168.2.135',change_format(3.4136870434448263, 3.5376778162245373, 1.513430717422267, 118.41365686184142)],
['192.168.2.57',change_format(1.8858098423315797, 3.4710941232680397, 0.41722694324446047, 468.6138889186977)],
['192.168.2.140',change_format(5.0, 5.0, 2.321928094887362, 477.8)],
['192.168.2.172',change_format(2.436358279316438, 2.436358279316438, 1.0553213308, 149.67793048551079)],
['192.168.2.5',change_format(2.0, 2.0, 1.0, 151.0)],
['192.168.2.176',change_format(4.560999039385204, 5.827089337175783, 1.780176402977154, 105.88888785184646)],
['192.168.10.28',change_format(3.0, 3.0, 1.584962500721156, 568.0)],
['192.168.2.210',change_format(3.4703999999999993, 4.153599999999997, 1.3467681037514798, 119.22077524049908)],
['192.168.2.216',change_format(30.77777777777778, 41.44444444444444, 4.456467699861599, 179.08125729866777)],
['192.168.2.228',change_format(4.103508771929824, 4.889473684210529, 1.5876111817553793, 105.60751018414621)],
['192.168.10.27',change_format(3.0, 3.0, 1.584962500721156, 568.0)],
['192.168.2.223',change_format(2.0, 2.0, 1.0, 110.0)],
['192.168.2.211',change_format(10.111111111111114, 12.194444444444441, 1.6908231186803444, 144.6664291819692)],
['192.168.2.164',change_format(1.576546130449475, 1.576546130449475, 0.52527124015224, 189.56267410258636)],
['192.168.2.98',change_format(1.7309458218549132, 1.7327823691460056, 0.6370607615359938, 181.46292798110997)],
['192.168.2.207',change_format(15.090909090909092, 19.954545454545457, 2.738335243147749, 163.8466171091612)],
['192.168.2.206',change_format(8.714285714285714, 18.142857142857142, 2.1902118604364333, 106.10299367974139)],
['192.168.2.194',change_format(1.7978436657681929, 1.9595687331536384, 0.5815296612934051, 213.59581722456994)],
['192.168.2.105',change_format(3.6240875912408774, 3.788321167883215, 1.223604067825969, 152.10438915387795)],
['192.168.2.136',change_format(2.8241398143091176, 2.8241398143091176, 1.3151772715003192, 122.72017370436281)],
['192.168.10.23',change_format(3.0, 3.0, 1.584962500721156, 510.0)],
['192.168.2.224',change_format(9.272727272727277, 12.236363636363633, 2.019307964663855, 140.48183497178368)],
['192.168.2.221',change_format(3.1, 3.1, 1.4398743691938192, 1255.1833333333332)],
['192.168.2.218',change_format(8.96, 10.64, 1.9422345129875536, 161.71623249299725)],
['192.168.2.101',change_format(1.887955182072829, 1.8907563025210083, 0.8463752836053231, 135.83047385620898)],
['192.168.2.51',change_format(4.2617647058823405, 5.789075630252102, 1.4329281639887457, 202.43349028825605)],
['192.168.2.180',change_format(3.707906976744198, 3.920000000000012, 1.3969354487344428, 118.33384153842675)],
['192.168.2.126',change_format(3.545036999234496, 4.4062260780811355, 1.3822919007987469, 208.6923117970043)],
['192.168.2.199',change_format(1.6407035175879396, 1.8241206030150743, 0.3884932426056226, 592.0188322277805)],
['192.168.2.232',change_format(1.0, 1.0, 0.0, 364.8888888888889)],
['192.168.2.137',change_format(21.206521739130434, 21.260869565217387, 3.4955322624237697, 809.4870992897959)],
['192.168.2.205',change_format(10.500000000000002, 16.166666666666668, 1.5672013246313865, 148.52422453833407)],
['192.168.2.92',change_format(55.5, 96.5, 4.646816795832456, 108.59976597476599)],
['192.168.2.197',change_format(1.340632603406326, 1.35279805352798, 0.3378019261997786, 280.81359826980236)],
['192.168.2.99',change_format(1.9010238907849846, 1.9569112627986402, 0.5416772105299678, 229.6006362104602)],
['192.168.2.37',change_format(1.0, 1.0, 0.0, 200.0)],
['192.168.2.155',change_format(1.0, 1.0, 0.0, 142.391089108911)],
['192.168.2.201',change_format(1.8188976377952764, 1.984251968503938, 0.5668417933312917, 283.7054008480635)],
['192.168.2.200',change_format(1.0995260663507098, 1.0995260663507098, 0.09952606635071092, 223.6872037914692)],
['192.168.2.118',change_format(1.3958641063515516, 2.3579517479074346, 0.3035937476037728, 236.4108483437128)],
['192.168.2.147',change_format(3.0, 3.0, 1.584962500721156, 357.3333333333333)],
['192.168.2.134',change_format(1.3439412484700128, 1.3451652386780923, 0.3132075848081614, 233.705446756426)],
['192.168.2.63',change_format(1.323529411764706, 1.3529411764705883, 0.252498897080034, 452.77941176470586)],
['192.168.2.145',change_format(1.901056676272818, 4.488952929875115, 0.6437130539782367, 210.76739481130457)],
['192.168.2.179',change_format(3.2343220338983087, 3.2355932203389797, 1.516496251566974, 130.8160118206895)],
['192.168.2.171',change_format(1.0, 1.0, 0.0, 312.0)],
['192.168.2.219',change_format(14.0, 17.0, 2.138583886398644, 222.84911329511334)],
['192.168.10.26',change_format(3.0, 3.0, 1.584962500721156, 568.0)],
['192.168.2.139',change_format(3.295302013422819, 3.447427293064875, 1.4825050320584643, 108.42162652819972)],
['192.168.0.120',change_format(3.0, 3.0, 1.584962500721156, 823.0)],
['192.168.2.6',change_format(2.0, 2.0, 1.0, 151.0)],
['192.168.2.116',change_format(4.935818601076113, 6.309761721752498, 1.7515272500505719, 118.19558089280324)],
['192.168.2.233',change_format(5.280405405405406, 7.932432432432431, 1.746991513726779, 144.90465125621563)],
['192.168.2.222',change_format(1.8, 2.0, 0.7006516669551291, 329.43333333333334)],
['192.168.2.242',change_format(1.2116991643454054, 1.2172701949860725, 0.19045023854243295, 227.35775301764156)],
['192.168.2.248',change_format(12.20754716981132, 12.20754716981132, 3.349919517797939, 4077.850341691852)],
['192.168.2.231',change_format(1.15, 1.25, 0.09591479170272445, 208.30833333333334)],
['192.168.2.152',change_format(1.0023094688221694, 1.0023094688221694, 0.0023094688221708994, 144.44168591224002)],
['192.168.2.185',change_format(5.1711815561959495, 7.418635926993279, 1.5843025716025818, 147.699142024777)],
['192.168.2.170',change_format(1.7490428123912283, 1.7556561085972857, 0.7076221408181069, 234.69756476336713)],
['192.168.2.230',change_format(1.0, 1.0, 0.0, 136.0)],
['192.168.2.196',change_format(2.9795021961932635, 3.0658857979502194, 1.1935741370295618, 137.04358243726486)],
['192.168.2.214',change_format(2.192810457516338, 2.369857747020367, 0.9454332558068492, 157.74999374951287)],
['192.168.2.208',change_format(9.936170212765957, 12.808510638297872, 2.052414134651663, 388.38002289555556)],
['192.168.2.111',change_format(3.5758021062943874, 3.641685035513105, 1.6197507015754866, 106.7515539606229)],
['192.168.2.202',change_format(1.3333333333333333, 1.3333333333333333, 0.3333333333333333, 293.8333333333333)],
['192.168.2.157',change_format(1.0, 1.0, 0.0, 143.31250000000014)],
['192.168.2.244',change_format(3.3406994619523473, 4.033820138355107, 1.086591029377999, 184.12209263851275)],
['192.168.2.212',change_format(4.0, 7.0, 1.9502120649147472, 147.85714285714286)],
['192.168.2.65',change_format(1.0174216027874576, 1.1655052264808363, 0.011965992309700307, 778.6536585365853)],
['192.168.2.225',change_format(4.368715083798882, 6.145251396648045, 1.6497846708751271, 121.101292673373)],
['192.168.212.13',change_format(2.0, 2.0, 1.0, 87.0)],
['192.168.2.151',change_format(2.0, 2.0, 1.0, 116.42307692307692)],
['192.168.2.143',change_format(1.8047619047619052, 1.817460317460317, 0.6788679005988882, 186.6663786522121)],
['192.168.2.149',change_format(6.041116005873716, 6.041116005873716, 1.8160049531100324, 461.1307385302328)],
['192.168.2.142',change_format(4.0, 4.0, 1.7414460711655217, 414.35)],
['192.168.2.251',change_format(1.0, 1.0, 0.0, 380.4666666666665)],
['192.168.2.106',change_format(3.7256296865987295, 3.9521245914247274, 1.6982504015807844, 102.04225076647208)],
['192.168.2.217',change_format(17.333333333333332, 26.77777777777778, 2.5832478288882097, 147.44045427683196)],
['192.168.2.154',change_format(1.053061224489795, 1.053061224489795, 0.05306122448979594, 159.48775510204086)],
['192.168.2.40',change_format(1.0, 1.0004766444232587, 0.0, 176.0686367969497)],
['192.168.2.131',change_format(1.8863751906456523, 1.964667005592275, 0.6854894300087677, 200.43829126512347)],
['192.168.2.192',change_format(4.38507405270243, 7.736103096749386, 1.012661925321756, 179.0343162216657)],
['192.168.2.226',change_format(3.063592699327566, 3.612103746397696, 1.0151486018369267, 163.83473045043695)],
['192.168.2.241',change_format(2.9904521201909566, 3.000000000000001, 1.4078837884485629, 108.2196827387051)],
['192.168.2.195',change_format(16.375, 25.612500000000004, 2.3801224757537893, 154.0400714357847)],
['192.168.2.209',change_format(12.388235294117647, 23.623529411764704, 2.749858439861174, 115.23257746580583)],
['192.168.2.114',change_format(3.4189602446483196, 3.6207951070336377, 1.607214181841886, 103.39622978964633)],
['192.168.2.156',change_format(1.0, 1.0, 0.0, 142.37019230769226)],
['192.168.2.220',change_format(1.5, 1.5, 0.5, 1337.5)],
['192.168.2.158',change_format(1.0271493212669678, 1.0271493212669678, 0.027149321266968326, 154.0339366515838)],
['192.168.2.62',change_format(1.0, 1.0, 0.0, 455.75)],
['192.168.2.198',change_format(1.2222222222222219, 1.2222222222222219, 0.22222222222222215, 253.4731182795699)],
['192.168.2.227',change_format(13.382978723404255, 19.978723404255316, 2.471017198039135, 117.12049046607204)],
['192.168.2.175',change_format(7.827387802071356, 14.286152665899513, 1.926634671894044, 411.65664871994846)],
['192.168.2.39',change_format(20.118644067796613, 41.847457627118644, 2.653461929134075, 228.84252249591447)],
['192.168.2.177',change_format(3.8938742061053047, 4.094038106945291, 1.65055417271608, 111.49085734869516)],
['192.168.2.141',change_format(5.0, 5.0, 2.321928094887362, 460.8)],
['192.168.2.159',change_format(2.700480307396725, 10.261479346781972, 1.0917184259169428, 331.8408472239757)],
['192.168.2.107',change_format(3.885686839577326, 4.374063400576377, 1.6546833781461554, 107.0094992334646)],
['192.168.2.215',change_format(2.4285714285714284, 2.4285714285714284, 1.1914071432692321, 636.6666666666667)],
['192.168.2.181',change_format(2.9271356783919593, 3.113902847571188, 1.1644407550224531, 151.91051686084202)],
['192.168.2.61',change_format(1.0, 1.0, 0.0, 422.0)],
['192.168.2.249',change_format(7.4186046511627906, 7.4186046511627906, 2.667099059501526, 503.36402362455243)],
['192.168.2.213',change_format(13.25, 20.85416666666666, 2.566044647937377, 408.5002142640347)],
])

# data = open('result_avg_vectors.csv','r').read().split('\n')
# n = len(data)-1
# print(n)
# d = 4

# X = np.array([])
# for d in data:
#     d = d[1:-1].split(',')
#     if len(d) < 2:
#         continue
#     try:
#         X = np.anp.add.at(index, range(n), 1)

num_trees = 25
tree_size = 32
sample_size_range = (n // tree_size, tree_size)
sample_size_range = 60
forest = []
i = 0
j = 0

# for i in range(0,20):
#     print(X[i][1])

while len(forest) < num_trees:
    print('i = ' + str(i))
    i = i + 1
    # Select random subsets of points uniformly
    ixs = np.random.choice(n, size=sample_size_range,replace=False)
    print(ixs)
    # print(ixs)np.add.at(index, range(n), 1)
    # Add sampled trees to forest

    # nums = random.choices(n)
    # print(random)

    # print(data_line[1].split(',')[0].split('.')[-1])
    # [rrcf.RCTree(X[ix], index_labels=ix) for ix in ixs]
    # trees = [print(X[ix][1],X[ix][0]) for ix in ixs]  # int(data_line[ix].split(',')[0].split('.')[-1])
    # trees = [rrcf.RCTree(X[ix][1], index_labels=(ix)) for ix in ixs] 
    tree = rrcf.RCTree()
    for ix in ixs:
        tree.insert_point(X[ix][1], index=X[ix][0])
    forest.append(tree)
    # [print(X[ix]) for ix in ixs]
    # trees = [X[ix] for ix in ixs]
    # print(trees)
    # trees = rrcf.RCTree()
    # for ix in ixs:
    #     tree.insert_point(X[ix],index_labels = ix)
    # print('j = ' + str(j))
    # j = j + 1
    # forest.extend(trees)

# print(forest)
# Compute average CoDisp
avg_codisp = pd.Series(0.0,[ X[i][0] for i in range(len(X))])
print("Average codisp : " + str(avg_codisp))
index = np.zeros(n)
for tree in forest:
    codisp = pd.Series({leaf : tree.codisp(leaf) for leaf in tree.leaves})
    print( "Codisp : " + str(codisp))
    avg_codisp[codisp.index] += codisp
    np.add.at(index, range(n), 1)
    # print(tree)
avg_codisp /= index


# print(avg_codisp)
x = []
y = []
print("Average Codisp \n\n\n")
for i in range(n):
    print(str(X[i][0]) + " : " + str(avg_codisp[i])  + "     "  + str(X[i][1])) 
    x.append(X[i][0])
    y.append(avg_codisp[i])


colors = ['black', 'dimgray', 'dimgrey', 'gray', 'grey', 'darkgray', 'darkgrey', 'silver', 'lightgray', 'lightgrey', 'gainsboro', 'whitesmoke', 'white', 'snow', 'rosybrown', 'lightcoral', 'indianred', 'brown', 'firebrick', 'maroon', 'darkred', 'red', 'mistyrose', 'salmon', 'tomato', 'darksalmon', 'coral', 'orangered', 'lightsalmon', 'sienna', 'seashell', 'chocolate', 'saddlebrown', 'sandybrown', 'peachpuff', 'peru', 'linen', 'bisque', 'darkorange', 'burlywood', 'antiquewhite', 'tan', 'navajowhite', 'blanchedalmond', 'papayawhip', 'moccasin', 'orange', 'wheat', 'oldlace', 'floralwhite', 'darkgoldenrod', 'goldenrod', 'cornsilk', 'gold', 'lemonchiffon', 'khaki', 'palegoldenrod', 'darkkhaki', 'ivory', 'beige', 'lightyellow', 'lightgoldenrodyellow', 'olive', 'yellow', 'olivedrab', 'yellowgreen', 'darkolivegreen', 'greenyellow', 'chartreuse', 'lawngreen', 'honeydew', 'darkseagreen', 'palegreen', 'lightgreen', 'forestgreen', 'limegreen', 'darkgreen', 'green', 'lime', 'seagreen', 'mediumseagreen', 'springgreen', 'mintcream', 'mediumspringgreen', 'mediumaquamarine', 'aquamarine', 'turquoise', 'lightseagreen', 'mediumturquoise', 'azure', 'lightcyan', 'paleturquoise', 'darkslategray', 'darkslategrey', 'teal', 'darkcyan', 'aqua', 'cyan', 'darkturquoise', 'cadetblue', 'powderblue', 'lightblue', 'deepskyblue', 'skyblue', 'lightskyblue', 'steelblue', 'aliceblue', 'dodgerblue', 'lightslategray', 'lightslategrey', 'slategray', 'slategrey', 'lightsteelblue', 'cornflowerblue', 'royalblue', 'ghostwhite', 'lavender', 'midnightblue', 'navy', 'darkblue', 'mediumblue', 'blue', 'slateblue', 'darkslateblue', 'mediumslateblue', 'mediumpurple', 'rebeccapurple', 'blueviolet', 'indigo', 'darkorchid', 'darkviolet', 'mediumorchid', 'thistle', 'plum', 'violet', 'purple', 'darkmagenta', 'fuchsia', 'magenta', 'orchid', 'mediumvioletred', 'deeppink', 'hotpink', 'lavenderblush', 'palevioletred', 'crimson', 'pink', 'lightpink']
plt.bar(x[:],y[:], color="red",width=0.1)  # [colors[j] for j in range(0,len(X))]    # height=0.1   # width=0.001
plt.xticks(np.arange(len(x)),x,rotation=90)
plt.title("Network Anomoly Graph")
plt.ylabel("Anomaly Score ->")
plt.xlabel("Machine IP")
plt.show()